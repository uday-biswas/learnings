//learning kubernetes
-> difference between kubernetes and docker 
- docker is having problem of auto scaling , auto healing, enterprise level nature - {firewall, load balancer, security, etc}

-> kubernetes is a cluster of group of nodes , which is having one master node and multiple worker nodes
- solving auto scaling - we just need to add more worker nodes, using the yaml file.
- solving auto healing - if one node is about to go down , then the master node will automatically create a new node and add it to the cluster
- solving enterprise level security - kubernetes is having a feature of RBAC (role based access control) , which is used to give access to the users to the cluster
- load balancer - kubernetes is having a feature of load balancer , which is used to distribute the load on the worker nodes
- service discovery - it is used to discover the services in the cluster

-> architecture of kubernetes
- A master and its controlled nodes(worker nodes) constitute a “Kubernetes cluster”.
  as shown in the image : k8s_architecture.jpg

- master node(control plane) - it is having 4 components
1. kube-apiserver - The API server is the entry point for all the REST 
   commands used to control the cluster. All the administrative tasks 
   are done by the API server within the master node. If we want to 
   create, delete, update or display in Kubernetes object it has to 
   go through this API server.API server validates and configures the 
   API objects such as ports, services, replication, controllers, and 
   deployments and it is responsible for exposing APIs for every operation. 
   We can interact with these APIs using a tool called kubectl.
   kubectl is a command-line interface for running commands against Kubernetes clusters.

2. etcd - it is a key value pair database , which is used to store the data of the cluster
   at any point of time and and is also used to store the configuration 
   details such as subnets, config maps, etc.

3. kube-controller-manager - the controller watches the desired state of 
   the cluster if the current state of the cluster does not meet the 
   desired state then the control loop takes the corrective steps to 
   make sure that the current state is the same as that of the desired 
   state. The key controllers are the replication controller, endpoint 
   controller, namespace controller, and service account controller. 

4. kube-scheduler - It is responsible for tracking the utilization of the 
   working load of each worker node and then placing the workload on 
   the node where resources are available and can accept the workload.
   basically it is used to schedule the pods on the new worker nodes.

- worker node - it is having 3 components
1. kubelet - It is a primary node agent which communicates with the master
   node and gets the pod specifications through the API server and executes 
   the container associated with the pods and ensures that the containers 
   described in the pods are running and healthy.

2. kube-proxy - maintains the distributed network across all the nodes, 
   pods, and containers and exposes the services across the outside world.

3. container runtime - it is used to run the containers. example - docker, containerd, etc.

4. Pods - It is a group of containers that are deployed together on the 
   same host. With the help of pods, we can deploy multiple dependent 
   containers together so it acts as a wrapper around these containers 
   so we can interact and manage these containers primarily through pods. 
   -> smallest unit of kubernetes
   -> each pod gets its own IP address 

   => firstly install minikube and kubectl from official documentation.

   => some kubectl commands
   create deployment - kubectl create deployment <deployment_name> --image=<image_name>
   edit deployment - kubectl edit deployment <deployment_name>
   delete deployment - kubectl delete deployment <deployment_name>

   status of different components of kubernetes: 
   kubectl get nodes | pod | deployment | service | replicaset

   log to console of the pod: kubectl logs <pod_name>
   go to the shell of the pod: kubectl exec -it <pod_name> -- /bin/bash

   -> deployment is used to create the pods and number of replicas of the pods.
   -> here if any pod is deleted then controller will create another pod, but its ip address will be different.
   -> to handle this we can create a service using service.yml file.
   -> load balancing - it is used to distribute the load on the worker nodes.
   -> expose to world - the service will expose the pods to the world.

   -> four types of services are there - cluster ip, headless, node port, load balancer.
   - cluster ip - it will create a single ip address which will be used to access the pods, 
                  so , the users having the ip address can access the pods.
                  it is the default type of service.
   - headless - it will create a domain name which will be used to access the pods,
                 so, the users having the domain name can access the pods.
   - node port - it will create a port number which will be used to access the pods,
                  so, the users having ip address along with the port number can access the pods.
   - load balancer - it will create a public domain name which will be used to access the pods,
                      so, the users having the domain name can access the pods.(exposed to world)

   use configuration file for crud: 
   apply a configuration file: kubectl apply -f <file_name>
   delete a configuration file: kubectl delete -f <file_name>

   => The configuration file is in yaml format and contains 3 parts:
   1. metadata - name, labels, etc.
   2. spec - containers, ports, etc.
   3. status - status of the pod, if the desired status is not equal to the current 
   status then the controller will take the corrective steps to make the current 
   status equal to the desired status.

   => the configuration files are : deployment, service
   -> in the deployment file, the spec contains number of replicas, a selector label
   for the pod, template for the pod, and each template contains metadata and spec for
   the pod.
   example of deployment file:
   apiVersion: apps/v1
   kind: Deployment
   metadata:
      name: myapp-deployment
      labels:                 //this is used by service to select the deployment
         app: myapp
   spec:
      replicas: 3          //number of replicas of the pod
      selector:            //this selector is used to select the pod inside the template 
         matchLabels:
         app: myapp
      template:            //this is the template for the pod, it contains metadata, spec, and container details of the pod
         metadata:
         labels:
            app: myapp
         spec:
         containers:
         - name: myapp
            image: nginx
            ports:
            - containerPort: 8080

-> in the service file, the spec contains the selector label for the deployment, and the type of service.
the port defines the port of the service, and the targetPort defines the port of the pod.
   example of service file:
   apiVersion: v1
   kind: Service
   metadata:
      name: myapp-service
   spec:
      selector:
         app: myapp
      ports:
      - protocol: TCP
         port: 80
         targetPort: 8080
      type: LoadBalancer

-> command to get the service information: kubectl describe service <service_name>
-> command to see the pod information: kubectl get pod -o wide
-> command to see deployment information in yaml format: kubectl get deployment <deployment_name> -o yaml


==> example deployment of mongo express with mongodb in kubernetes
data flow : 
mongo express browser -> mongo express external service -> mongo express pod -> 
mongodb internal service using db url -> mongodb pod using db username and password.

-> A secret configuration file is used to store the username and password of the mongodb.
example secret configuration file:
apiVersion: v1
kind: Secret
metadata:
   name: mongodb-secret
type: Opaque
data:
   username: cm9vdA==
   password: cGFzc3dvcmQ=

-> example deployment file for mongodb is: 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password


-> and the service file for mongodb is:
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
   selector:
      app: mongodb
   ports:
      - protocol: TCP
         port: 27017
         targetPort: 27017

-> before the deployment of mongo express, we need to make a config map for the db url:
example config map file:
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
data:
   database_url: mongodb-service

-> example deployment file for mongo express is:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express-deployment
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
          image: mongo-express
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-username
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password
            - name: ME_CONFIG_MONGODB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: mongodb-configmap
                  key: database_url

-> and the service file for mongo express is:
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
  selector:
    app: mongo-express
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30000

-> now apply all the configuration files and then, get all the services with the command:
kubectl get service
and then run command to get the external ip of the mongo express service and open it in browser:
minikube service mongo-express-service